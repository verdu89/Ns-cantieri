diff --git a/src/pages/Customers.tsx b/src/pages/Customers.tsx
index 2b7d3c1..8e60af1 100644
--- a/src/pages/Customers.tsx
+++ b/src/pages/Customers.tsx
@@ -2,6 +2,8 @@
 import { Link } from "react-router-dom";
 import { customerAPI } from "../../api/customers";
 import type { Customer } from "../../types";
+import { ConfirmDialog } from "@/components/ui/ConfirmDialog";
+import { toast } from "@/components/ui/use-toast";
 
 export default function Customers() {
   const [customers, setCustomers] = useState<Customer[]>([]);
@@ -14,6 +16,9 @@
   const [search, setSearch] = useState("");
   const [sortAsc, setSortAsc] = useState(true);
 
+  const [openConfirm, setOpenConfirm] = useState(false);
+  const [selectedId, setSelectedId] = useState<string | null>(null);
+
   // üîπ caricamento dati dal backend
   useEffect(() => {
     customerAPI.list().then((data) => {
@@ -47,10 +52,12 @@
   };
 
   const handleSave = async () => {
-    if (!formData.name) return alert("Il nome cliente √® obbligatorio");
+    if (!formData.name) {
+      toast({ title: "Il nome cliente √® obbligatorio ‚ùå" });
+      return;
+    }
 
     try {
       if (editingId) {
@@ -69,7 +76,10 @@
       setEditingId(null);
       setShowForm(false);
     } catch (err) {
-      console.error("‚ùå Errore salvataggio cliente:", err);
-      alert("Errore durante il salvataggio del cliente");
+      console.error("‚ùå Errore salvataggio cliente:", err);
+      toast({ title: "Errore durante il salvataggio del cliente ‚ùå" });
     }
   };
 
@@ -79,13 +89,27 @@
   };
 
   const handleDelete = async (id: string) => {
-    if (!confirm("Vuoi davvero eliminare questo cliente?")) return;
-    try {
-      await customerAPI.remove(id);
-      setCustomers(customers.filter((c) => c.id !== id));
-    } catch (err) {
-      console.error("‚ùå Errore eliminazione cliente:", err);
-      alert("Errore durante l'eliminazione del cliente");
-    }
+    setSelectedId(id);
+    setOpenConfirm(true);
+  };
+
+  const confirmDelete = async () => {
+    if (!selectedId) return;
+    try {
+      await customerAPI.remove(selectedId);
+      setCustomers(customers.filter((c) => c.id !== selectedId));
+      toast({ title: "Cliente eliminato con successo ‚úÖ" });
+    } catch (err) {
+      console.error("‚ùå Errore eliminazione cliente:", err);
+      toast({ title: "Errore durante l'eliminazione del cliente ‚ùå" });
+    } finally {
+      setSelectedId(null);
+    }
   };
 
   const filteredCustomers = customers
@@ -255,6 +279,16 @@
           </div>
         </div>
       )}
+
+      <ConfirmDialog
+        open={openConfirm}
+        setOpen={setOpenConfirm}
+        title="Elimina cliente"
+        description="Sei sicuro di voler eliminare questo cliente? L'azione non pu√≤ essere annullata."
+        confirmText="Elimina"
+        cancelText="Annulla"
+        onConfirm={confirmDelete}
+      />
     </div>
   );
 }
